{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TabixIndexedFile","require","RemoteFile","App","useState","header","setHeader","error","setError","useEffect","a","remoteIndexed","filehandle","URL","csiFilehandle","getHeader","className","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PACQA,EAAqBC,EAAQ,KAA7BD,iBACAE,EAAeD,EAAQ,IAAvBC,WAEO,SAASC,IAAO,IAAD,EACAC,qBADA,mBACrBC,EADqB,KACbC,EADa,OAEFF,qBAFE,mBAErBG,EAFqB,KAEdC,EAFc,KAsB5B,OAlBAC,qBAAU,WACR,sBAAC,gCAAAC,EAAA,sEAKSC,EAAgB,IAAIX,EAAiB,CACzCY,WAAY,IAAIV,EAJZW,EACJ,iGAIAC,cAAe,IAAIZ,EAAWW,EAAM,UAPzC,SAUwBF,EAAcI,YAVtC,OAUSV,EAVT,OAWGC,EAAUD,GAXb,gDAaGG,EAAS,EAAD,IAbX,wDAAD,KAgBC,IAED,sBAAKQ,UAAU,MAAf,UACE,wEACCT,EACC,qBAAKU,MAAO,CAAEC,MAAO,OAArB,mBAAkCX,KAC/BF,EAGH,8BAAMA,IAFN,gDChCR,IAYec,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC3B,EAAD,MAEF4B,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cb338402.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nconst { TabixIndexedFile } = require(\"@gmod/tabix\");\nconst { RemoteFile } = require(\"generic-filehandle\");\n\nexport default function App() {\n  const [header, setHeader] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const URL =\n          \"https://ftp.ensembl.org/pub/release-104/variation/vcf/homo_sapiens/1000GENOMES-phase_3.vcf.gz\";\n\n        const remoteIndexed = new TabixIndexedFile({\n          filehandle: new RemoteFile(URL),\n          csiFilehandle: new RemoteFile(URL + \".csi\"),\n        });\n\n        const header = await remoteIndexed.getHeader();\n        setHeader(header);\n      } catch (e) {\n        setError(e);\n      }\n    })();\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>Testing @gmod/tabix on ensembl vcf+csi</h1>\n      {error ? (\n        <div style={{ color: \"red\" }}>{`${error}`}</div>\n      ) : !header ? (\n        <div>Loading...</div>\n      ) : (\n        <pre>{header}</pre>\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}